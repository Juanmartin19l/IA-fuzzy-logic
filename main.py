"""
Sistema Experto Difuso para determinar el perfil de un inversor
Punto de entrada principal del programa
"""

import traceback
from utils import clear_screen
from sistema_experto import SistemaExpertoDifusoInversorFCL
from visualizacion import VisualizadorSistemaExperto


def ejecutar_sistema():
    """
    Funci√≥n principal para ejecutar el sistema experto difuso.

    Esta funci√≥n maneja la interacci√≥n con el usuario, capturando los datos de entrada,
    valid√°ndolos, proces√°ndolos a trav√©s del sistema experto difuso y presentando
    los resultados al usuario de manera clara y comprensible.
    """
    try:
        # Inicializar el sistema experto de inferencia difusa
        sed = SistemaExpertoDifusoInversorFCL()
        visualizador = VisualizadorSistemaExperto()

        # Configurar interfaz de usuario por consola
        clear_screen()
        print("\n" + "=" * 70)
        print("   SISTEMA EXPERTO BASADO EN L√ìGICA DIFUSA PARA PERFILES DE INVERSI√ìN")
        print("   Implementaci√≥n Avanzada en Python con Scikit-Fuzzy")
        print("=" * 70)

        while True:
            try:
                print("\n‚ïî" + "‚ïê" * 66 + "‚ïó")
                print(
                    "‚ïë  Ingrese los datos del inversor (o escriba 'salir' para terminar)  ‚ïë"
                )
                print("‚ïö" + "‚ïê" * 66 + "‚ïù")

                # Validaci√≥n de edad con interfaz mejorada
                while True:
                    entrada = input("\n‚û§ Edad del inversor (20-100 a√±os): ")

                    if entrada.lower() in ["salir", "exit", "q"]:
                        break

                    try:
                        edad = int(entrada)
                        if 20 <= edad <= 100:
                            break
                        else:
                            print("‚ö†Ô∏è  Error: La edad debe estar entre 20 y 100 a√±os.")
                    except ValueError:
                        print("Error: Por favor, ingrese un n√∫mero entero v√°lido.")

                if entrada.lower() in ["salir", "exit", "q"]:
                    break

                # Validaci√≥n de ingresos con interfaz mejorada
                while True:
                    try:
                        ingresos_str = input("‚û§ Ingresos mensuales (1-15,000): ")
                        ingresos = int(ingresos_str)
                        if 1 <= ingresos <= 15000:
                            break
                        else:
                            print(
                                "‚ö†Ô∏è  Error: Los ingresos deben estar entre 1 y 15,000."
                            )
                    except ValueError:
                        print("‚ö†Ô∏è  Error: Por favor, ingrese un n√∫mero entero v√°lido.")

                # Validaci√≥n de conocimiento financiero con interfaz mejorada
                while True:
                    try:
                        print("\nEscala de conocimiento financiero:")
                        print("  1-3: Conocimiento b√°sico")
                        print("  4-7: Conocimiento intermedio")
                        print("  8-10: Conocimiento avanzado")
                        conocimiento_str = input(
                            "‚û§ Nivel de conocimiento financiero (1-10): "
                        )
                        conocimiento = float(conocimiento_str)
                        if 1 <= conocimiento <= 10:
                            break
                        else:
                            print(
                                "‚ö†Ô∏è  Error: El nivel de conocimiento debe estar entre 1 y 10."
                            )
                    except ValueError:
                        print("‚ö†Ô∏è  Error: Por favor, ingrese un n√∫mero v√°lido.")

                # Validaci√≥n de tolerancia al riesgo con interfaz mejorada
                while True:
                    try:
                        print("\nEscala de tolerancia al riesgo:")
                        print("  1-3: Baja tolerancia (prefiere seguridad)")
                        print("  4-7: Tolerancia media (acepta cierto riesgo)")
                        print(
                            "  8-10: Alta tolerancia (asume riesgos por mayor rentabilidad)"
                        )
                        tolerancia_str = input("‚û§ Tolerancia al riesgo (1-10): ")
                        tolerancia = float(tolerancia_str)
                        if 1 <= tolerancia <= 10:
                            break
                        else:
                            print(
                                "‚ö†Ô∏è  Error: La tolerancia al riesgo debe estar entre 1 y 10."
                            )
                    except ValueError:
                        print("‚ö†Ô∏è  Error: Por favor, ingrese un n√∫mero v√°lido.")

                # Evaluar perfil mediante el sistema de inferencia difusa
                print("\n‚è≥ Procesando mediante inferencia difusa...")
                resultado = sed.evaluar(edad, ingresos, conocimiento, tolerancia)

                # Presentaci√≥n visual de resultados
                print("\n" + "‚îå" + "‚îÄ" * 68 + "‚îê")
                print(
                    "‚îÇ"
                    + " RESULTADO DEL AN√ÅLISIS DE PERFIL DE INVERSI√ìN ".center(68)
                    + "‚îÇ"
                )
                print("‚îî" + "‚îÄ" * 68 + "‚îò")

                # Secci√≥n de par√°metros de entrada
                print("\nüîπ PAR√ÅMETROS DE ENTRADA:")
                print("  ‚Ä¢ Edad: " + str(edad) + " a√±os")
                print("  ‚Ä¢ Ingresos mensuales: $" + str(ingresos))
                print("  ‚Ä¢ Conocimiento financiero: " + str(conocimiento) + "/10")
                print(
                    "  ‚Ä¢ Tolerancia al riesgo: " + str(tolerancia) + "/10"
                )  # Secci√≥n de resultados de la inferencia
                print("\nüîπ RESULTADOS DE LA INFERENCIA DIFUSA:")
                print(
                    "  ‚Ä¢ Potencial de inversi√≥n: " + f"{resultado['potencial']:.2f}/10"
                )
                print("  ‚Ä¢ Nivel de riesgo: " + f"{resultado['riesgo']:.2f}/10")

                # Secci√≥n de perfil resultante
                print("\nüîπ PERFIL DE INVERSI√ìN RECOMENDADO:")

                # Personalizaci√≥n del mensaje seg√∫n el valor num√©rico del perfil
                valor = resultado["valor_perfil"]

                # Determinar perfil y color basado en el valor num√©rico
                if valor <= 2.0:
                    perfil_texto = "\033[94mCONSERVADOR\033[0m"  # Azul
                    recomendaciones = [
                        "‚Ä¢ 80% en dep√≥sitos a plazo fijo y cuentas de ahorro de alta seguridad",
                        "‚Ä¢ 15% en bonos gubernamentales de bajo riesgo",
                        "‚Ä¢ 5% en bonos corporativos AAA",
                        "‚Üí M√°xima prioridad: Preservaci√≥n del capital",
                    ]
                elif valor <= 4.0:
                    perfil_texto = "\033[96mCONSERVADOR\033[0m"  # Cyan
                    recomendaciones = [
                        "‚Ä¢ 60% en bonos gubernamentales y corporativos de alta calidad",
                        "‚Ä¢ 20% en dep√≥sitos a plazo fijo",
                        "‚Ä¢ 15% en fondos de inversi√≥n de renta fija",
                        "‚Ä¢ 5% en acciones blue-chip",
                        "‚Üí Prioridad: Estabilidad con rendimiento moderado",
                    ]
                elif valor <= 6.0:
                    perfil_texto = "\033[93mMODERADO\033[0m"  # Amarillo
                    recomendaciones = [
                        "‚Ä¢ 40% en renta fija de alta calidad",
                        "‚Ä¢ 30% en acciones de empresas establecidas",
                        "‚Ä¢ 20% en fondos mixtos",
                        "‚Ä¢ 10% en inversiones alternativas conservadoras",
                        "‚Üí Prioridad: Balance entre crecimiento y seguridad",
                    ]
                elif valor <= 8.0:
                    perfil_texto = "\033[91mAGRESIVO\033[0m"  # Rojo claro
                    recomendaciones = [
                        "‚Ä¢ 60% en renta variable diversificada",
                        "‚Ä¢ 20% en fondos de inversi√≥n de alto rendimiento",
                        "‚Ä¢ 10% en mercados emergentes",
                        "‚Ä¢ 10% en renta fija",
                        "‚Üí Prioridad: Crecimiento del capital a largo plazo",
                    ]
                else:
                    perfil_texto = "\033[31;1mAGRESIVO\033[0m"  # Rojo intenso
                    recomendaciones = [
                        "‚Ä¢ 70% en renta variable de alto crecimiento",
                        "‚Ä¢ 15% en mercados emergentes",
                        "‚Ä¢ 10% en capital privado y startups",
                        "‚Ä¢ 5% en criptomonedas",
                        "‚Üí Prioridad: M√°ximo rendimiento con alta tolerancia al riesgo",
                    ]

                # Imprimir perfil y recomendaciones
                print(f"  ‚Ä¢ Perfil: {perfil_texto}")
                print(f"  ‚Ä¢ Valor num√©rico: {valor:.2f}/10")
                print("  ‚Ä¢ Recomendaci√≥n de cartera:")
                for rec in recomendaciones:
                    print(f"    {rec}")

                print("\n" + "‚îÄ" * 70)

                # Opciones de visualizaci√≥n con instrucciones mejoradas
                ver_graficas = input(
                    "\n¬øDesea ver las gr√°ficas de las funciones de membres√≠a? (s/n): "
                )
                if ver_graficas.lower() in ["s", "si", "s√≠", "y", "yes"]:
                    visualizador.visualizar_variables(sed)

                ver_resultado = input(
                    "\n¬øDesea ver la gr√°fica del proceso de inferencia? (s/n): "
                )
                if ver_resultado.lower() in ["s", "si", "s√≠", "y", "yes"]:
                    visualizador.visualizar_resultado(sed)

                print("\n" + "‚ïê" * 70)

            except ValueError as e:
                print(f"\n‚ùå Error de validaci√≥n: {e}")
                print("   Por favor, corrija los valores e intente nuevamente.")
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {str(e)}")

        print("\n" + "‚ïî" + "‚ïê" * 68 + "‚ïó")
        print(
            "‚ïë"
            + " ¬°Gracias por utilizar el Sistema Experto de Perfiles de Inversi√≥n! ".center(
                68
            )
            + "‚ïë"
        )
        print("‚ïö" + "‚ïê" * 68 + "‚ïù")
        print("\nDesarrollado con tecnolog√≠a de L√≥gica Difusa (Fuzzy Logic)")
        print("¬© Sistema Experto Profesional v2.0\n")

    except Exception as e:
        print(f"\n‚ùå ERROR FATAL EN EL SISTEMA: {str(e)}")
        print(f"Tipo de error: {type(e).__name__}")
        print("Detalles t√©cnicos:")

        traceback.print_exc()
        print("\nEl sistema no puede continuar. Por favor, reinicie la aplicaci√≥n.")


if __name__ == "__main__":
    ejecutar_sistema()
